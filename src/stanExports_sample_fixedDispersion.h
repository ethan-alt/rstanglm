// Generated by rstantools.  Do not edit by hand.

/*
    rstanglm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanglm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanglm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_sample_fixedDispersion_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_sample_fixedDispersion");
    reader.add_event(7, 7, "include", "/functions/functions.stan");
    reader.add_event(7, 0, "start", "/functions/functions.stan");
    reader.add_event(83, 76, "end", "/functions/functions.stan");
    reader.add_event(83, 8, "restart", "model_sample_fixedDispersion");
    reader.add_event(109, 32, "end", "model_sample_fixedDispersion");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
mu_linkinv(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
               const int& mu_link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 16;
        if (as_bool(logical_eq(mu_link, 1))) {
            current_statement_begin__ = 16;
            return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        } else if (as_bool(logical_eq(mu_link, 2))) {
            current_statement_begin__ = 17;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(mu_link, 3))) {
            current_statement_begin__ = 18;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_logit(eta));
        } else if (as_bool(logical_eq(mu_link, 4))) {
            current_statement_begin__ = 19;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv(eta));
        } else if (as_bool(logical_eq(mu_link, 5))) {
            current_statement_begin__ = 20;
            return stan::math::promote_scalar<fun_return_scalar_t__>(Phi(eta));
        } else if (as_bool(logical_eq(mu_link, 6))) {
            current_statement_begin__ = 21;
            return stan::math::promote_scalar<fun_return_scalar_t__>(add(divide(stan::math::atan(eta), stan::math::pi()), 0.5));
        } else if (as_bool(logical_eq(mu_link, 7))) {
            current_statement_begin__ = 22;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_cloglog(eta));
        } else if (as_bool(logical_eq(mu_link, 8))) {
            current_statement_begin__ = 23;
            return stan::math::promote_scalar<fun_return_scalar_t__>(square(eta));
        } else if (as_bool(logical_eq(mu_link, 9))) {
            current_statement_begin__ = 24;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv(stan::math::sqrt(eta)));
        } else {
            current_statement_begin__ = 25;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid link";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 26;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct mu_linkinv_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
               const int& mu_link, std::ostream* pstream__) const {
        return mu_linkinv(eta, mu_link, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
theta_link(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
               const int& mu_link,
               const int& dist, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 38;
        if (as_bool(logical_eq(dist, 1))) {
            current_statement_begin__ = 38;
            return stan::math::promote_scalar<fun_return_scalar_t__>(mu_linkinv(eta, mu_link, pstream__));
        } else if (as_bool(logical_eq(dist, 2))) {
            current_statement_begin__ = 39;
            return stan::math::promote_scalar<fun_return_scalar_t__>(logit(mu_linkinv(eta, mu_link, pstream__)));
        } else if (as_bool(logical_eq(dist, 3))) {
            current_statement_begin__ = 40;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::log(mu_linkinv(eta, mu_link, pstream__)));
        } else if (as_bool(logical_eq(dist, 4))) {
            current_statement_begin__ = 41;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv(mu_linkinv(eta, mu_link, pstream__)));
        } else {
            current_statement_begin__ = 42;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid density";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 43;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct theta_link_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
               const int& mu_link,
               const int& dist, std::ostream* pstream__) const {
        return theta_link(eta, mu_link, dist, pstream__);
    }
};
template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
sum_bfun(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& theta,
             const int& dist, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 47;
        if (as_bool(logical_eq(dist, 1))) {
            current_statement_begin__ = 47;
            return stan::math::promote_scalar<fun_return_scalar_t__>((0.5 * sum(square(theta))));
        } else if (as_bool(logical_eq(dist, 2))) {
            current_statement_begin__ = 48;
            return stan::math::promote_scalar<fun_return_scalar_t__>(sum(stan::math::log(add(1.0, stan::math::exp(theta)))));
        } else if (as_bool(logical_eq(dist, 3))) {
            current_statement_begin__ = 49;
            return stan::math::promote_scalar<fun_return_scalar_t__>(sum(stan::math::exp(theta)));
        } else if (as_bool(logical_eq(dist, 4))) {
            current_statement_begin__ = 50;
            return stan::math::promote_scalar<fun_return_scalar_t__>((-(1.0) * sum(stan::math::log(theta))));
        } else {
            current_statement_begin__ = 51;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Invalid density";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 52;
        return stan::math::promote_scalar<fun_return_scalar_t__>(sum(theta));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct sum_bfun_functor__ {
    template <typename T0__>
        typename boost::math::tools::promote_args<T0__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& theta,
             const int& dist, std::ostream* pstream__) const {
        return sum_bfun(theta, dist, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
glm_logpost(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
                const T1__& dispersion,
                const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& m_post,
                const T3__& lambda_post,
                const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& X,
                const int& dist,
                const int& mu_link,
                const int& N, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 64;
        validate_non_negative_index("theta", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta(N);
        stan::math::initialize(theta, DUMMY_VAR__);
        stan::math::fill(theta, DUMMY_VAR__);
        stan::math::assign(theta,multiply(X, beta));
        current_statement_begin__ = 65;
        stan::math::assign(theta, theta_link(theta, mu_link, dist, pstream__));
        current_statement_begin__ = 67;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((lambda_post / dispersion) * (dot_product(m_post, theta) - sum_bfun(theta, dist, pstream__))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct glm_logpost_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
                const T1__& dispersion,
                const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& m_post,
                const T3__& lambda_post,
                const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& X,
                const int& dist,
                const int& mu_link,
                const int& N, std::ostream* pstream__) const {
        return glm_logpost(beta, dispersion, m_post, lambda_post, X, dist, mu_link, N, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
sum_cfun(const T0__& sum_fy,
             const T1__& dispersion,
             const int& N,
             const int& dist, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 76;
        local_scalar_t__ disp_inv(DUMMY_VAR__);
        (void) disp_inv;  // dummy to suppress unused var warning
        stan::math::initialize(disp_inv, DUMMY_VAR__);
        stan::math::fill(disp_inv, DUMMY_VAR__);
        stan::math::assign(disp_inv,inv(dispersion));
        current_statement_begin__ = 77;
        if (as_bool(logical_eq(dist, 1))) {
            current_statement_begin__ = 77;
            return stan::math::promote_scalar<fun_return_scalar_t__>((-(0.5) * ((sum_fy * disp_inv) + (N * stan::math::log(dispersion)))));
        } else if (as_bool(logical_eq(dist, 4))) {
            current_statement_begin__ = 78;
            return stan::math::promote_scalar<fun_return_scalar_t__>((((disp_inv - 1) * sum_fy) - (N * ((disp_inv * stan::math::log(dispersion)) + stan::math::lgamma(disp_inv)))));
        } else {
            current_statement_begin__ = 79;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Density must be gaussian or Gamma";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 80;
        return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct sum_cfun_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& sum_fy,
             const T1__& dispersion,
             const int& N,
             const int& dist, std::ostream* pstream__) const {
        return sum_cfun(sum_fy, dispersion, N, dist, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_sample_fixedDispersion
  : public stan::model::model_base_crtp<model_sample_fixedDispersion> {
private:
        int N;
        int K;
        matrix_d X;
        vector_d m_post;
        double lambda_post;
        int mu_link;
        int dist;
        double dispersion;
public:
    model_sample_fixedDispersion(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_sample_fixedDispersion(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_sample_fixedDispersion_namespace::model_sample_fixedDispersion";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 89;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 90;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 91;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "K", K);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = K;
            size_t X_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 92;
            validate_non_negative_index("m_post", "N", N);
            context__.validate_dims("data initialization", "m_post", "vector_d", context__.to_vec(N));
            m_post = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("m_post");
            pos__ = 0;
            size_t m_post_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < m_post_j_1_max__; ++j_1__) {
                m_post(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 93;
            context__.validate_dims("data initialization", "lambda_post", "double", context__.to_vec());
            lambda_post = double(0);
            vals_r__ = context__.vals_r("lambda_post");
            pos__ = 0;
            lambda_post = vals_r__[pos__++];
            check_greater_or_equal(function__, "lambda_post", lambda_post, 0);
            current_statement_begin__ = 94;
            context__.validate_dims("data initialization", "mu_link", "int", context__.to_vec());
            mu_link = int(0);
            vals_i__ = context__.vals_i("mu_link");
            pos__ = 0;
            mu_link = vals_i__[pos__++];
            check_greater_or_equal(function__, "mu_link", mu_link, 1);
            check_less_or_equal(function__, "mu_link", mu_link, 9);
            current_statement_begin__ = 95;
            context__.validate_dims("data initialization", "dist", "int", context__.to_vec());
            dist = int(0);
            vals_i__ = context__.vals_i("dist");
            pos__ = 0;
            dist = vals_i__[pos__++];
            check_greater_or_equal(function__, "dist", dist, 1);
            check_less_or_equal(function__, "dist", dist, 4);
            current_statement_begin__ = 96;
            context__.validate_dims("data initialization", "dispersion", "double", context__.to_vec());
            dispersion = double(0);
            vals_r__ = context__.vals_r("dispersion");
            pos__ = 0;
            dispersion = vals_r__[pos__++];
            check_greater_or_equal(function__, "dispersion", dispersion, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 101;
            validate_non_negative_index("beta", "K", K);
            num_params_r__ += K;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_sample_fixedDispersion() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 101;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "K", K);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(K);
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 101;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(K, lp__);
            else
                beta = in__.vector_constrain(K);
            // model body
            current_statement_begin__ = 106;
            lp_accum__.add(glm_logpost(beta, dispersion, m_post, lambda_post, X, dist, mu_link, N, pstream__));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_sample_fixedDispersion_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(K);
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_sample_fixedDispersion";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_sample_fixedDispersion_namespace::model_sample_fixedDispersion stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
