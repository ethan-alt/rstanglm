// Generated by rstantools.  Do not edit by hand.

/*
    rstanglm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanglm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanglm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_sample_hierarchical_binomial_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_sample_hierarchical_binomial");
    reader.add_event(7, 7, "include", "/functions/functions.stan");
    reader.add_event(7, 0, "start", "/functions/functions.stan");
    reader.add_event(175, 168, "end", "/functions/functions.stan");
    reader.add_event(175, 8, "restart", "model_sample_hierarchical_binomial");
    reader.add_event(175, 8, "include", "/functions/priors.stan");
    reader.add_event(175, 0, "start", "/functions/priors.stan");
    reader.add_event(238, 63, "end", "/functions/priors.stan");
    reader.add_event(238, 9, "restart", "model_sample_hierarchical_binomial");
    reader.add_event(283, 52, "end", "model_sample_hierarchical_binomial");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
mu_linkinv(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
               const int& mu_link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 16;
        if (as_bool(logical_eq(mu_link, 1))) {
            current_statement_begin__ = 16;
            return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        } else if (as_bool(logical_eq(mu_link, 2))) {
            current_statement_begin__ = 17;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(mu_link, 3))) {
            current_statement_begin__ = 18;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_logit(eta));
        } else if (as_bool(logical_eq(mu_link, 4))) {
            current_statement_begin__ = 19;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv(eta));
        } else if (as_bool(logical_eq(mu_link, 5))) {
            current_statement_begin__ = 20;
            return stan::math::promote_scalar<fun_return_scalar_t__>(Phi(eta));
        } else if (as_bool(logical_eq(mu_link, 6))) {
            current_statement_begin__ = 21;
            return stan::math::promote_scalar<fun_return_scalar_t__>(add(divide(stan::math::atan(eta), stan::math::pi()), 0.5));
        } else if (as_bool(logical_eq(mu_link, 7))) {
            current_statement_begin__ = 22;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_cloglog(eta));
        } else if (as_bool(logical_eq(mu_link, 8))) {
            current_statement_begin__ = 23;
            return stan::math::promote_scalar<fun_return_scalar_t__>(square(eta));
        } else if (as_bool(logical_eq(mu_link, 9))) {
            current_statement_begin__ = 24;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv(stan::math::sqrt(eta)));
        }
        current_statement_begin__ = 25;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct mu_linkinv_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
               const int& mu_link, std::ostream* pstream__) const {
        return mu_linkinv(eta, mu_link, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
mu_eta(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
           const int& mu_link,
           const int& N, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 28;
        validate_non_negative_index("temp", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> temp(N);
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 29;
        if (as_bool(logical_eq(mu_link, 1))) {
            current_statement_begin__ = 29;
            return stan::math::promote_scalar<fun_return_scalar_t__>(rep_vector(1.0, N));
        } else if (as_bool(logical_eq(mu_link, 2))) {
            current_statement_begin__ = 30;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(eta));
        } else if (as_bool(logical_eq(mu_link, 3))) {
            current_statement_begin__ = 32;
            stan::math::assign(temp, stan::math::exp(eta));
            current_statement_begin__ = 33;
            return stan::math::promote_scalar<fun_return_scalar_t__>(elt_divide(temp, square(add(1.0, temp))));
        } else if (as_bool(logical_eq(mu_link, 4))) {
            current_statement_begin__ = 35;
            return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(-(1.0), inv(square(eta))));
        } else if (as_bool(logical_eq(mu_link, 5))) {
            current_statement_begin__ = 36;
            return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(stan::math::sqrt((2 * stan::math::pi())), stan::math::exp(multiply(-(0.5), square(eta)))));
        } else if (as_bool(logical_eq(mu_link, 6))) {
            current_statement_begin__ = 37;
            return stan::math::promote_scalar<fun_return_scalar_t__>(divide(inv(add(1, square(eta))), stan::math::pi()));
        } else if (as_bool(logical_eq(mu_link, 7))) {
            current_statement_begin__ = 39;
            stan::math::assign(temp, stan::math::exp(eta));
            current_statement_begin__ = 40;
            return stan::math::promote_scalar<fun_return_scalar_t__>(elt_multiply(temp, stan::math::exp(minus(temp))));
        } else if (as_bool(logical_eq(mu_link, 8))) {
            current_statement_begin__ = 42;
            return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(2.0, eta));
        } else if (as_bool(logical_eq(mu_link, 9))) {
            current_statement_begin__ = 44;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 45;
                stan::model::assign(temp, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (-(1.0) * inv((2.0 * pow(get_base1(eta, i, "eta", 1), 1.5)))), 
                            "assigning variable temp");
            }
            current_statement_begin__ = 47;
            return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
        current_statement_begin__ = 49;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct mu_eta_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
           const int& mu_link,
           const int& N, std::ostream* pstream__) const {
        return mu_eta(eta, mu_link, N, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
theta_link(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
               const int& mu_link,
               const int& dist, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 63;
        if (as_bool(logical_eq(dist, 1))) {
            current_statement_begin__ = 63;
            return stan::math::promote_scalar<fun_return_scalar_t__>(mu_linkinv(eta, mu_link, pstream__));
        } else if (as_bool(logical_eq(dist, 2))) {
            current_statement_begin__ = 64;
            return stan::math::promote_scalar<fun_return_scalar_t__>(logit(mu_linkinv(eta, mu_link, pstream__)));
        } else if (as_bool(logical_eq(dist, 3))) {
            current_statement_begin__ = 65;
            return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::log(mu_linkinv(eta, mu_link, pstream__)));
        } else if (as_bool(logical_eq(dist, 4))) {
            current_statement_begin__ = 66;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv(mu_linkinv(eta, mu_link, pstream__)));
        }
        current_statement_begin__ = 67;
        return stan::math::promote_scalar<fun_return_scalar_t__>(eta);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct theta_link_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& eta,
               const int& mu_link,
               const int& dist, std::ostream* pstream__) const {
        return theta_link(eta, mu_link, dist, pstream__);
    }
};
template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
sum_bfun(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& theta,
             const int& dist, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 71;
        if (as_bool(logical_eq(dist, 1))) {
            current_statement_begin__ = 71;
            return stan::math::promote_scalar<fun_return_scalar_t__>((0.5 * sum(square(theta))));
        } else if (as_bool(logical_eq(dist, 2))) {
            current_statement_begin__ = 72;
            return stan::math::promote_scalar<fun_return_scalar_t__>(sum(stan::math::log(add(1.0, stan::math::exp(theta)))));
        } else if (as_bool(logical_eq(dist, 3))) {
            current_statement_begin__ = 73;
            return stan::math::promote_scalar<fun_return_scalar_t__>(sum(stan::math::exp(theta)));
        } else if (as_bool(logical_eq(dist, 4))) {
            current_statement_begin__ = 74;
            return stan::math::promote_scalar<fun_return_scalar_t__>((-(1.0) * sum(stan::math::log(theta))));
        }
        current_statement_begin__ = 75;
        return stan::math::promote_scalar<fun_return_scalar_t__>(sum(theta));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct sum_bfun_functor__ {
    template <typename T0__>
        typename boost::math::tools::promote_args<T0__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& theta,
             const int& dist, std::ostream* pstream__) const {
        return sum_bfun(theta, dist, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
glm_logpost(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
                const T1__& dispersion,
                const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& m_post,
                const T3__& lambda_post,
                const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& X,
                const int& dist,
                const int& mu_link,
                const int& N, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 87;
        validate_non_negative_index("theta", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta(N);
        stan::math::initialize(theta, DUMMY_VAR__);
        stan::math::fill(theta, DUMMY_VAR__);
        stan::math::assign(theta,multiply(X, beta));
        current_statement_begin__ = 88;
        stan::math::assign(theta, theta_link(theta, mu_link, dist, pstream__));
        current_statement_begin__ = 90;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((lambda_post / dispersion) * (dot_product(m_post, theta) - sum_bfun(theta, dist, pstream__))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct glm_logpost_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
                const T1__& dispersion,
                const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& m_post,
                const T3__& lambda_post,
                const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& X,
                const int& dist,
                const int& mu_link,
                const int& N, std::ostream* pstream__) const {
        return glm_logpost(beta, dispersion, m_post, lambda_post, X, dist, mu_link, N, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
sum_cfun(const T0__& sum_fy,
             const T1__& dispersion,
             const int& N,
             const int& dist, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 99;
        local_scalar_t__ disp_inv(DUMMY_VAR__);
        (void) disp_inv;  // dummy to suppress unused var warning
        stan::math::initialize(disp_inv, DUMMY_VAR__);
        stan::math::fill(disp_inv, DUMMY_VAR__);
        stan::math::assign(disp_inv,inv(dispersion));
        current_statement_begin__ = 100;
        if (as_bool(logical_eq(dist, 1))) {
            current_statement_begin__ = 100;
            return stan::math::promote_scalar<fun_return_scalar_t__>((-(0.5) * ((sum_fy * disp_inv) + (N * stan::math::log(dispersion)))));
        } else if (as_bool(logical_eq(dist, 4))) {
            current_statement_begin__ = 101;
            return stan::math::promote_scalar<fun_return_scalar_t__>((((disp_inv - 1) * sum_fy) - (N * ((disp_inv * stan::math::log(dispersion)) + stan::math::lgamma(disp_inv)))));
        }
        current_statement_begin__ = 102;
        return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct sum_cfun_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& sum_fy,
             const T1__& dispersion,
             const int& N,
             const int& dist, std::ostream* pstream__) const {
        return sum_cfun(sum_fy, dispersion, N, dist, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
vfun(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& mu,
         const int& dist, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 107;
        if (as_bool(logical_eq(dist, 1))) {
            current_statement_begin__ = 107;
            return stan::math::promote_scalar<fun_return_scalar_t__>(rep_vector(1.0, num_elements(mu)));
        } else if (as_bool(logical_eq(dist, 2))) {
            current_statement_begin__ = 108;
            return stan::math::promote_scalar<fun_return_scalar_t__>(elt_multiply(mu, subtract(1, mu)));
        } else if (as_bool(logical_eq(dist, 3))) {
            current_statement_begin__ = 109;
            return stan::math::promote_scalar<fun_return_scalar_t__>(mu);
        } else if (as_bool(logical_eq(dist, 4))) {
            current_statement_begin__ = 110;
            return stan::math::promote_scalar<fun_return_scalar_t__>(square(mu));
        }
        current_statement_begin__ = 111;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mu);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct vfun_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& mu,
         const int& dist, std::ostream* pstream__) const {
        return vfun(mu, dist, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T7__, typename T8__, typename T9__, typename T11__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T7__, T8__, T9__, typename boost::math::tools::promote_args<T11__>::type>::type>::type
lognc_laplace(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& m,
                  const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& X,
                  const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& Q,
                  const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& R,
                  const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& Rinv,
                  const int& dist,
                  const int& mu_link,
                  const Eigen::Matrix<T7__, Eigen::Dynamic, 1>& start,
                  const T8__& lambda,
                  const T9__& tau,
                  const int& maxit,
                  const T11__& tol,
                  const int& n,
                  const int& p, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T7__, T8__, T9__, typename boost::math::tools::promote_args<T11__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 117;
        local_scalar_t__ log2pi(DUMMY_VAR__);
        (void) log2pi;  // dummy to suppress unused var warning
        stan::math::initialize(log2pi, DUMMY_VAR__);
        stan::math::fill(log2pi, DUMMY_VAR__);
        current_statement_begin__ = 118;
        local_scalar_t__ lambda_tau(DUMMY_VAR__);
        (void) lambda_tau;  // dummy to suppress unused var warning
        stan::math::initialize(lambda_tau, DUMMY_VAR__);
        stan::math::fill(lambda_tau, DUMMY_VAR__);
        stan::math::assign(lambda_tau,(lambda * tau));
        current_statement_begin__ = 119;
        validate_non_negative_index("s", "p", p);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> s(p);
        stan::math::initialize(s, DUMMY_VAR__);
        stan::math::fill(s, DUMMY_VAR__);
        current_statement_begin__ = 120;
        validate_non_negative_index("s_old", "p", p);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> s_old(p);
        stan::math::initialize(s_old, DUMMY_VAR__);
        stan::math::fill(s_old, DUMMY_VAR__);
        current_statement_begin__ = 121;
        validate_non_negative_index("s1", "p", p);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> s1(p);
        stan::math::initialize(s1, DUMMY_VAR__);
        stan::math::fill(s1, DUMMY_VAR__);
        current_statement_begin__ = 122;
        validate_non_negative_index("eta", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta(n);
        stan::math::initialize(eta, DUMMY_VAR__);
        stan::math::fill(eta, DUMMY_VAR__);
        current_statement_begin__ = 123;
        validate_non_negative_index("W", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> W(n);
        stan::math::initialize(W, DUMMY_VAR__);
        stan::math::fill(W, DUMMY_VAR__);
        current_statement_begin__ = 124;
        validate_non_negative_index("z", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> z(n);
        stan::math::initialize(z, DUMMY_VAR__);
        stan::math::fill(z, DUMMY_VAR__);
        current_statement_begin__ = 125;
        validate_non_negative_index("mu", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(n);
        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu, DUMMY_VAR__);
        current_statement_begin__ = 126;
        validate_non_negative_index("mu_p", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu_p(n);
        stan::math::initialize(mu_p, DUMMY_VAR__);
        stan::math::fill(mu_p, DUMMY_VAR__);
        current_statement_begin__ = 127;
        validate_non_negative_index("C", "p", p);
        validate_non_negative_index("C", "p", p);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> C(p, p);
        stan::math::initialize(C, DUMMY_VAR__);
        stan::math::fill(C, DUMMY_VAR__);
        current_statement_begin__ = 128;
        local_scalar_t__ logdetI(DUMMY_VAR__);
        (void) logdetI;  // dummy to suppress unused var warning
        stan::math::initialize(logdetI, DUMMY_VAR__);
        stan::math::fill(logdetI, DUMMY_VAR__);
        current_statement_begin__ = 129;
        int is_converged(0);
        (void) is_converged;  // dummy to suppress unused var warning
        stan::math::fill(is_converged, std::numeric_limits<int>::min());
        current_statement_begin__ = 130;
        validate_non_negative_index("betahat", "p", p);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> betahat(p);
        stan::math::initialize(betahat, DUMMY_VAR__);
        stan::math::fill(betahat, DUMMY_VAR__);
        current_statement_begin__ = 132;
        validate_non_negative_index("Iinv", "p", p);
        validate_non_negative_index("Iinv", "p", p);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Iinv(p, p);
        stan::math::initialize(Iinv, DUMMY_VAR__);
        stan::math::fill(Iinv, DUMMY_VAR__);
        current_statement_begin__ = 133;
        local_scalar_t__ logp(DUMMY_VAR__);
        (void) logp;  // dummy to suppress unused var warning
        stan::math::initialize(logp, DUMMY_VAR__);
        stan::math::fill(logp, DUMMY_VAR__);
        current_statement_begin__ = 134;
        local_scalar_t__ laplace(DUMMY_VAR__);
        (void) laplace;  // dummy to suppress unused var warning
        stan::math::initialize(laplace, DUMMY_VAR__);
        stan::math::fill(laplace, DUMMY_VAR__);
        current_statement_begin__ = 136;
        stan::math::assign(log2pi, 1.83787706641);
        current_statement_begin__ = 137;
        stan::math::assign(lambda_tau, (lambda * tau));
        current_statement_begin__ = 138;
        stan::math::assign(s, start);
        current_statement_begin__ = 139;
        stan::math::assign(eta, rep_vector(1.0, n));
        current_statement_begin__ = 140;
        for (int i = 1; i <= maxit; ++i) {
            current_statement_begin__ = 141;
            stan::math::assign(s_old, s);
            current_statement_begin__ = 142;
            stan::math::assign(mu, mu_linkinv(eta, mu_link, pstream__));
            current_statement_begin__ = 143;
            stan::math::assign(mu_p, mu_eta(eta, mu_link, n, pstream__));
            current_statement_begin__ = 144;
            stan::math::assign(z, add(eta, elt_divide(subtract(m, mu), mu_p)));
            current_statement_begin__ = 145;
            stan::math::assign(W, elt_divide(square(mu_p), vfun(mu, dist, pstream__)));
            current_statement_begin__ = 146;
            stan::math::assign(C, multiply(transpose(Q), diag_pre_multiply(W, Q)));
            current_statement_begin__ = 147;
            stan::math::assign(s, mdivide_left_spd(C, multiply(transpose(Q), elt_multiply(W, z))));
            current_statement_begin__ = 148;
            stan::math::assign(eta, multiply(Q, s));
            current_statement_begin__ = 150;
            stan::math::assign(is_converged, logical_lt(stan::math::sqrt(sum(square(subtract(s, s_old)))), tol));
            current_statement_begin__ = 151;
            if (as_bool(logical_eq(is_converged, 1))) {
                current_statement_begin__ = 151;
                break;
            }
        }
        current_statement_begin__ = 154;
        stan::math::assign(betahat, multiply(multiply(Rinv, transpose(Q)), eta));
        current_statement_begin__ = 158;
        stan::math::assign(Iinv, multiply(multiply((1.0 / lambda_tau), transpose(X)), diag_pre_multiply(W, X)));
        current_statement_begin__ = 161;
        stan::math::assign(logdetI, (-(1.0) * log_determinant(Iinv)));
        current_statement_begin__ = 164;
        stan::math::assign(laplace, ((0.5 * ((p * log2pi) + logdetI)) + glm_logpost(betahat, (1.0 / tau), m, lambda, X, dist, mu_link, n, pstream__)));
        current_statement_begin__ = 166;
        return stan::math::promote_scalar<fun_return_scalar_t__>(laplace);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct lognc_laplace_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T7__, typename T8__, typename T9__, typename T11__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T7__, T8__, T9__, typename boost::math::tools::promote_args<T11__>::type>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& m,
                  const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& X,
                  const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& Q,
                  const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& R,
                  const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& Rinv,
                  const int& dist,
                  const int& mu_link,
                  const Eigen::Matrix<T7__, Eigen::Dynamic, 1>& start,
                  const T8__& lambda,
                  const T9__& tau,
                  const int& maxit,
                  const T11__& tol,
                  const int& n,
                  const int& p, std::ostream* pstream__) const {
        return lognc_laplace(m, X, Q, R, Rinv, dist, mu_link, start, lambda, tau, maxit, tol, n, p, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
locprior_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& nu,
                  const T1__& lambda0,
                  const T2__& tau,
                  const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& m0,
                  const int& dist, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 171;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((lambda0 * tau) * (sum(elt_multiply(m0, nu)) - sum_bfun(nu, dist, pstream__))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
locprior_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& nu,
                  const T1__& lambda0,
                  const T2__& tau,
                  const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& m0,
                  const int& dist, std::ostream* pstream__) {
    return locprior_lpdf<false>(nu,lambda0,tau,m0,dist, pstream__);
}
struct locprior_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& nu,
                  const T1__& lambda0,
                  const T2__& tau,
                  const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& m0,
                  const int& dist, std::ostream* pstream__) const {
        return locprior_lpdf(nu, lambda0, tau, m0, dist, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
binomial_conjugate_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
                            const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m,
                            const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& X,
                            const T3__& lambda,
                            const int& mu_link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 183;
        local_scalar_t__ res(DUMMY_VAR__);
        (void) res;  // dummy to suppress unused var warning
        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res, DUMMY_VAR__);
        current_statement_begin__ = 184;
        validate_non_negative_index("eta", "num_elements(m)", num_elements(m));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta(num_elements(m));
        stan::math::initialize(eta, DUMMY_VAR__);
        stan::math::fill(eta, DUMMY_VAR__);
        stan::math::assign(eta,multiply(X, beta));
        current_statement_begin__ = 185;
        if (as_bool(logical_neq(mu_link, 3))) {
            current_statement_begin__ = 186;
            stan::math::assign(eta, mu_linkinv(eta, mu_link, pstream__));
            current_statement_begin__ = 187;
            stan::math::assign(eta, logit(eta));
        }
        current_statement_begin__ = 189;
        return stan::math::promote_scalar<fun_return_scalar_t__>((lambda * sum(subtract(elt_multiply(m, eta), stan::math::log(add(1.0, stan::math::exp(eta)))))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
binomial_conjugate_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
                            const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m,
                            const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& X,
                            const T3__& lambda,
                            const int& mu_link, std::ostream* pstream__) {
    return binomial_conjugate_lpdf<false>(beta,m,X,lambda,mu_link, pstream__);
}
struct binomial_conjugate_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
                            const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m,
                            const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& X,
                            const T3__& lambda,
                            const int& mu_link, std::ostream* pstream__) const {
        return binomial_conjugate_lpdf(beta, m, X, lambda, mu_link, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
poisson_conjugate_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
                           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m,
                           const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& X,
                           const T3__& lambda,
                           const int& mu_link, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 197;
        validate_non_negative_index("eta", "rows(m)", rows(m));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta(rows(m));
        stan::math::initialize(eta, DUMMY_VAR__);
        stan::math::fill(eta, DUMMY_VAR__);
        stan::math::assign(eta,multiply(X, beta));
        current_statement_begin__ = 198;
        if (as_bool(logical_neq(mu_link, 2))) {
            current_statement_begin__ = 199;
            stan::math::assign(eta, mu_linkinv(eta, mu_link, pstream__));
            current_statement_begin__ = 200;
            stan::math::assign(eta, stan::math::log(eta));
        }
        current_statement_begin__ = 202;
        return stan::math::promote_scalar<fun_return_scalar_t__>((lambda * sum(subtract(elt_multiply(m, eta), stan::math::exp(eta)))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
poisson_conjugate_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
                           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m,
                           const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& X,
                           const T3__& lambda,
                           const int& mu_link, std::ostream* pstream__) {
    return poisson_conjugate_lpdf<false>(beta,m,X,lambda,mu_link, pstream__);
}
struct poisson_conjugate_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
                           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m,
                           const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& X,
                           const T3__& lambda,
                           const int& mu_link, std::ostream* pstream__) const {
        return poisson_conjugate_lpdf(beta, m, X, lambda, mu_link, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_sample_hierarchical_binomial
  : public stan::model::model_base_crtp<model_sample_hierarchical_binomial> {
private:
        int N;
        int K;
        vector_d y;
        matrix_d X;
        double lambda;
        double lambda0;
        vector_d m0;
        int mu_link;
        vector_d start;
        int maxit;
        double tol;
        matrix_d Q;
        matrix_d R;
        matrix_d Rinv;
        double lambdapost;
        vector_d shape1;
        vector_d shape2;
public:
    model_sample_hierarchical_binomial(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_sample_hierarchical_binomial(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_sample_hierarchical_binomial_namespace::model_sample_hierarchical_binomial";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 244;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 245;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 246;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "y", y, 0);
            check_less_or_equal(function__, "y", y, 1);
            current_statement_begin__ = 247;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "K", K);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = K;
            size_t X_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 248;
            context__.validate_dims("data initialization", "lambda", "double", context__.to_vec());
            lambda = double(0);
            vals_r__ = context__.vals_r("lambda");
            pos__ = 0;
            lambda = vals_r__[pos__++];
            check_greater_or_equal(function__, "lambda", lambda, 0);
            current_statement_begin__ = 249;
            context__.validate_dims("data initialization", "lambda0", "double", context__.to_vec());
            lambda0 = double(0);
            vals_r__ = context__.vals_r("lambda0");
            pos__ = 0;
            lambda0 = vals_r__[pos__++];
            check_greater_or_equal(function__, "lambda0", lambda0, 0);
            current_statement_begin__ = 250;
            validate_non_negative_index("m0", "N", N);
            context__.validate_dims("data initialization", "m0", "vector_d", context__.to_vec(N));
            m0 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("m0");
            pos__ = 0;
            size_t m0_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < m0_j_1_max__; ++j_1__) {
                m0(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "m0", m0, 0);
            check_less_or_equal(function__, "m0", m0, 1);
            current_statement_begin__ = 251;
            context__.validate_dims("data initialization", "mu_link", "int", context__.to_vec());
            mu_link = int(0);
            vals_i__ = context__.vals_i("mu_link");
            pos__ = 0;
            mu_link = vals_i__[pos__++];
            check_greater_or_equal(function__, "mu_link", mu_link, 1);
            check_less_or_equal(function__, "mu_link", mu_link, 9);
            current_statement_begin__ = 252;
            validate_non_negative_index("start", "K", K);
            context__.validate_dims("data initialization", "start", "vector_d", context__.to_vec(K));
            start = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            vals_r__ = context__.vals_r("start");
            pos__ = 0;
            size_t start_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < start_j_1_max__; ++j_1__) {
                start(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 253;
            context__.validate_dims("data initialization", "maxit", "int", context__.to_vec());
            maxit = int(0);
            vals_i__ = context__.vals_i("maxit");
            pos__ = 0;
            maxit = vals_i__[pos__++];
            check_greater_or_equal(function__, "maxit", maxit, 1);
            current_statement_begin__ = 254;
            context__.validate_dims("data initialization", "tol", "double", context__.to_vec());
            tol = double(0);
            vals_r__ = context__.vals_r("tol");
            pos__ = 0;
            tol = vals_r__[pos__++];
            check_greater_or_equal(function__, "tol", tol, 0);
            // initialize transformed data variables
            current_statement_begin__ = 258;
            validate_non_negative_index("Q", "N", N);
            validate_non_negative_index("Q", "K", K);
            Q = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K);
            stan::math::fill(Q, DUMMY_VAR__);
            stan::math::assign(Q,qr_thin_Q(X));
            current_statement_begin__ = 259;
            validate_non_negative_index("R", "K", K);
            validate_non_negative_index("R", "K", K);
            R = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(K, K);
            stan::math::fill(R, DUMMY_VAR__);
            stan::math::assign(R,qr_thin_R(X));
            current_statement_begin__ = 260;
            validate_non_negative_index("Rinv", "K", K);
            validate_non_negative_index("Rinv", "K", K);
            Rinv = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(K, K);
            stan::math::fill(Rinv, DUMMY_VAR__);
            stan::math::assign(Rinv,inverse(R));
            current_statement_begin__ = 261;
            lambdapost = double(0);
            stan::math::fill(lambdapost, DUMMY_VAR__);
            stan::math::assign(lambdapost,(1.0 + lambda));
            current_statement_begin__ = 262;
            validate_non_negative_index("shape1", "N", N);
            shape1 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            stan::math::fill(shape1, DUMMY_VAR__);
            stan::math::assign(shape1,multiply(lambda0, m0));
            current_statement_begin__ = 263;
            validate_non_negative_index("shape2", "N", N);
            shape2 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            stan::math::fill(shape2, DUMMY_VAR__);
            stan::math::assign(shape2,multiply(lambda0, subtract(1, m0)));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 268;
            validate_non_negative_index("beta", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 269;
            validate_non_negative_index("m", "N", N);
            num_params_r__ += N;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_sample_hierarchical_binomial() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 268;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "K", K);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(K);
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 269;
        if (!(context__.contains_r("m")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable m missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("m");
        pos__ = 0U;
        validate_non_negative_index("m", "N", N);
        context__.validate_dims("parameter initialization", "m", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> m(N);
        size_t m_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < m_j_1_max__; ++j_1__) {
            m(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, m);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable m: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 268;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(K, lp__);
            else
                beta = in__.vector_constrain(K);
            current_statement_begin__ = 269;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> m;
            (void) m;  // dummy to suppress unused var warning
            if (jacobian__)
                m = in__.vector_lub_constrain(0, 1, N, lp__);
            else
                m = in__.vector_lub_constrain(0, 1, N);
            // model body
            {
            current_statement_begin__ = 276;
            validate_non_negative_index("mpost", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mpost(N);
            stan::math::initialize(mpost, DUMMY_VAR__);
            stan::math::fill(mpost, DUMMY_VAR__);
            stan::math::assign(mpost,divide(add(y, multiply(lambda, m)), lambdapost));
            current_statement_begin__ = 278;
            lp_accum__.add(binomial_conjugate_lpdf(beta, mpost, X, lambdapost, mu_link, pstream__));
            current_statement_begin__ = 279;
            lp_accum__.add((-(1.0) * lognc_laplace(m, X, Q, R, Rinv, 2, mu_link, start, lambda, 1.0, 100, tol, N, K, pstream__)));
            current_statement_begin__ = 280;
            lp_accum__.add(beta_log(m, shape1, shape2));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("m");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_sample_hierarchical_binomial_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(K);
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> m = in__.vector_lub_constrain(0, 1, N);
        size_t m_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < m_j_1_max__; ++j_1__) {
            vars__.push_back(m(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_sample_hierarchical_binomial";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t m_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < m_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "m" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t m_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < m_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "m" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_sample_hierarchical_binomial_namespace::model_sample_hierarchical_binomial stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
